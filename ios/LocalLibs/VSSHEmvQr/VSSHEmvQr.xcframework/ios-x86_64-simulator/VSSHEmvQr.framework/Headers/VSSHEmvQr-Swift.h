#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
#ifndef VSSHEMVQR_SWIFT_H
#define VSSHEMVQR_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="VSSHEmvQr",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;
@protocol EmvQrManagerCallback;
@class UIViewController;
@protocol MerchantEmvQrEntity;

/// The main class of the framework, that provides and manages the main functionality of it
SWIFT_CLASS("_TtC9VSSHEmvQr12EmvQrManager")
@interface EmvQrManager : NSObject
/// It initializes the class with the given parameters
/// \param urlBase The base url of the license server
///
/// \param publicKey The license server’s public key to stablish a secure communication
///
/// \param license The license key that allows to use this framework
///
/// \param callback The class that listens any event that this class throws
///
///
/// returns:
/// A instance of this manager class
- (nonnull instancetype)initWithUrlBase:(NSString * _Nonnull)urlBase publicKey:(NSString * _Nonnull)publicKey license:(NSString * _Nonnull)license callback:(id <EmvQrManagerCallback> _Nonnull)callback OBJC_DESIGNATED_INITIALIZER;
/// It starts the capture of the QR code with the especified camera
/// precondition:
/// The <code>EmvQrManagerCallback</code>’s <code>initiatedScanEmvqr</code> fuction should be called
/// \param viewController The base url of the license server
///
/// \param cameraId The camera position (front or back) that will be used to capture the QR code
///
- (void)startScanWithViewController:(UIViewController * _Nonnull)viewController cameraId:(AVCaptureDevicePosition)cameraId callback:(id <EmvQrManagerCallback> _Nonnull)callback;
/// It processes the given string to find a valid <code>MerchantEmvQrEntity</code>.
/// It receives the data that you want to process. The format and integrity of the data is validated,
/// it is verified that it complies with the structure dictated by the EMVCo standart and finally the
/// conversion of the input chain to the output object is made, if any irregularity is found with the
/// data that is received, is reported through the <code>EmvQrManagerCallback</code>’s <code>onErrorEmvqr</code> method.
/// precondition:
/// The <code>EmvQrManagerCallback</code>’s <code>initiatedScanEmvqr</code> function should be called
/// \param qrData The string obtained of the QR code
///
///
/// returns:
/// A merchant EMV Qr entity, if the process finish successfully. Otherwise, a nil.
- (id <MerchantEmvQrEntity> _Nullable)processEmvqrDataWithQrData:(NSString * _Nonnull)qrData callback:(id <EmvQrManagerCallback> _Nonnull)callback SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// This protocol receives the events thrown by <code>EmvQrManager</code> class
SWIFT_PROTOCOL("_TtP9VSSHEmvQr20EmvQrManagerCallback_")
@protocol EmvQrManagerCallback
/// This method is called when the library is started successfully, after validate the license.
- (void)initiatedScanEmvqr;
/// This method receives the string obtained by the capture QR code process of the <code>EmvQrManager</code>’s <code>startScan</code> method
/// \param qrData The data contained in the QR code
///
- (void)onScanResponseWithQrData:(NSString * _Nonnull)qrData;
/// This methods receives the cause’s description of any error occurred while the library is used
/// \param errorType The type of the occurred error
///
/// \param errorMessage The description of the ocurred error
///
- (void)onErrorEmvqrWithErrorType:(NSInteger)errorType errorMessage:(NSString * _Nonnull)errorMessage;
@end

@protocol MerchantAccountInformationTemplate;

/// This class contains all payment system merchant identifiers contained in the QR Code (IDs “02” to “51”).
/// They are grouped by each payment system (e.g. VISA, MasterCard),
/// where each group is represented by a dictionary object.
SWIFT_PROTOCOL("_TtP9VSSHEmvQr26MerchantAccountInformation_")
@protocol MerchantAccountInformation
/// Merchant identifiers in VISA payment system
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable visaMerchantIdentifiers;
/// Merchant identifiers in MasterCard payment system
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable mastercardMerchantIdentifiers;
/// Merchant identifiers in EMVCo payment system
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable emvcoMerchantIdentifiers;
/// Merchant identifiers in Discover payment system
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable discoverMerchantIdentifiers;
/// Merchant identifiers in American Express payment system
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable amexMerchantIdentifiers;
/// Merchant identifiers in JCB payment system
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable jcbMerchantIdentifiers;
/// Merchant identifiers in UnionPay payment system
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable unionPayMerchantIdentifiers;
/// All Additional Payment Network Identifiers (IDs “26” to “51”) contained in the QR Code. The dictionary
/// key is the ID of the Merchant Account Information Template. The map value is a
/// <code>MerchantAccountInformationTemplate</code> object.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id <MerchantAccountInformationTemplate>> * _Nullable additionalPaymentNetworks;
@end


/// This class contains the explicit information of a merchant identifier in a payment network.
SWIFT_PROTOCOL("_TtP9VSSHEmvQr34MerchantAccountInformationTemplate_")
@protocol MerchantAccountInformationTemplate
/// An identifier that sets the context of the stored data in the <code>paymentNetworkSpecific</code> dictionary.
@property (nonatomic, readonly, copy) NSString * _Nullable globallyUniqueIdentifier;
/// Association of data objects to IDs and type of data object is specific to the Globally Unique Identifier.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable paymentNetworkSpecific;
@end

@protocol PaymentSystemSpecificTemplate;

/// The Additional Data Field Template includes information that may be provided by the Merchant or
/// may be populated by the mobile application to enable or facilitate certain use cases.
SWIFT_PROTOCOL("_TtP9VSSHEmvQr22MerchantAdditionalData_")
@protocol MerchantAdditionalData
/// The invoice number or bill number.
@property (nonatomic, readonly, copy) NSString * _Nullable billNumber;
/// The mobile number could be provided by the merchant or could be an indication for the mobile
/// application to prompt the consumer to input a Mobile Number.
@property (nonatomic, readonly, copy) NSString * _Nullable mobileNumber;
/// A distinctive value associated to a store.
@property (nonatomic, readonly, copy) NSString * _Nullable storeLabel;
/// Typically, a loyalty card number.
@property (nonatomic, readonly, copy) NSString * _Nullable loyaltyNumber;
/// Any value as defined by the merchant or acquirer in order to identify the transaction.
@property (nonatomic, readonly, copy) NSString * _Nullable referenceLabel;
/// Any value identifying a specific consumer.
@property (nonatomic, readonly, copy) NSString * _Nullable customerLabel;
/// A distinctive value associated to a terminal in the store.
@property (nonatomic, readonly, copy) NSString * _Nullable terminalLabel;
/// Any value defining the purpose of the transaction.
@property (nonatomic, readonly, copy) NSString * _Nullable purposeOfTransaction;
/// It contains indications that the mobile application is to provide the requested information in order
/// to complete the transaction.
@property (nonatomic, readonly, copy) NSString * _Nullable additionalConsumerDataRequest;
/// Data objects reserved for future use of EMVCo
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable rfuForEmvCo;
/// Custom additional data allocated by custom implementation.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id <PaymentSystemSpecificTemplate>> * _Nullable paymentSystemSpecificTemplates;
@end

@protocol MerchantInformationLanguage;
@protocol MerchantUnreservedTemplate;

/// It contains all decoded data of the EMV Qr
SWIFT_PROTOCOL("_TtP9VSSHEmvQr19MerchantEmvQrEntity_")
@protocol MerchantEmvQrEntity
/// It defines the version of the QR Code template and hence the conventions
/// on the identifiers, lengths, and values.
@property (nonatomic, readonly, copy) NSString * _Nullable payloadFormatIndicator;
/// It identifies the communication technology (here QR Code) and whether the data is static or dynamic.
@property (nonatomic, readonly, copy) NSString * _Nullable pointOfInitiationMethod;
/// Ii identifies the merchant. The format and value are unique and specific to a payment
/// system and several values may
/// be included in the QR Code.
@property (nonatomic, readonly, strong) id <MerchantAccountInformation> _Nonnull merchantAccountInformation;
/// It es merchant category code as is defined by [ISO 18245] and assigned by the Acquirer.
@property (nonatomic, readonly, copy) NSString * _Nullable merchantCategoryCode;
/// It indicates the currency code of the transaction. A 3-digit numeric value, as defined by [ISO 4217].
@property (nonatomic, readonly, copy) NSString * _Nullable transactionCurrency;
/// The transaction amount, if known. For instance, “99.34”. If present, this value is displayed to the consumer
/// by the mobile application when processing the transaction.
@property (nonatomic, readonly, copy) NSString * _Nullable transactionAmout;
/// It indicates whether the consumer will be prompted to enter a tip or whether
/// the merchant has determined that a flat,
/// or percentage convenience fee is charged.
@property (nonatomic, readonly, copy) NSString * _Nullable tipOrConvenienceIndicator;
/// The fixed amount convenience fee when <code>tipOrConvenienceIndicator</code> indicates a flat convenience fee.
@property (nonatomic, readonly, copy) NSString * _Nullable valueOfConvenienceFeeFixed;
/// The percentage convenience fee when <code>tipOrConvenienceIndicator</code> indicates a percentage convenience fee.
@property (nonatomic, readonly, copy) NSString * _Nullable valueOfConvenienceFeePercentage;
/// It indicates the country of the merchant acceptance device. A 2-character alpha value,
/// as defined by [ISO 3166-1 alpha 2]
/// and assigned by the Acquirer.
@property (nonatomic, readonly, copy) NSString * _Nullable countryCode;
/// The “doing business as” name for the merchant, recognizable to the consumer.
@property (nonatomic, readonly, copy) NSString * _Nullable merchantName;
/// City of operations for the merchant.
@property (nonatomic, readonly, copy) NSString * _Nullable merchantCity;
/// Zip code or Pin code or Postal code of the merchant.
@property (nonatomic, readonly, copy) NSString * _Nullable postalCode;
/// The Additional Data Field Template includes information that may be provided
/// by the Merchant or may be populated by
/// the mobile application to enable or facilitate certain use cases.
@property (nonatomic, readonly, strong) id <MerchantAdditionalData> _Nullable merchantAdditionalData;
/// The Additional Data Field Template includes information that may be provided
/// by the Merchant or may be populated by
/// the mobile application to enable or facilitate certain use cases.
@property (nonatomic, readonly, strong) id <MerchantInformationLanguage> _Nullable merchantInformationLanguageTemplate;
/// Data objects reserved for future use of EMVCo
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable rfuForEmvCo;
/// Unreserved Templates
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id <MerchantUnreservedTemplate>> * _Nullable merchantUnreservedTemplates;
/// Checksum calculated over all the data objects included in the QR Code.
@property (nonatomic, readonly, copy) NSString * _Nullable crc;
@end


/// This class includes merchant Name and potentially other merchant related information in an alternate language,
/// typically the local language.
SWIFT_PROTOCOL("_TtP9VSSHEmvQr27MerchantInformationLanguage_")
@protocol MerchantInformationLanguage
/// It identifies the alternate language, it represents the single language used to encode the merchant name
/// and merchant city. It contains 2 alphabetical characters coded to a value defined by [ISO 639].
@property (nonatomic, readonly, copy) NSString * _Nullable languagePreference;
/// It indicates the “doing business as” name for the merchant in the merchant’s local language.
@property (nonatomic, readonly, copy) NSString * _Nullable merchantNameAlternateLanguage;
/// It indicates the city in which the merchant transacts in the merchant’s local language.
@property (nonatomic, readonly, copy) NSString * _Nullable merchantCityAlternateLanguage;
@end


/// A class representation of an Unreserved Template contained in the EMV QR Code.
/// It represents additional information allocated and used by other parties, such as (domestic)
/// payment systems and value-added service providers for their own products.
SWIFT_PROTOCOL("_TtP9VSSHEmvQr26MerchantUnreservedTemplate_")
@protocol MerchantUnreservedTemplate
/// An identifier that sets the context of the stored data in the <code>contextSpecificData</code> dictionary.
@property (nonatomic, readonly, copy) NSString * _Nullable globallyUniqueIdentifier;
/// Association of data objects to IDs and type of data object is specific to the Globally Unique Identifier.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable contextSpecificData;
@end


/// A class representation of a Payment System Specific Template contained in the EMV QR Code.
/// It represents additional data allocated and used by other parties, such as (domestic) payment
/// systems and value-added service providers for their own products.
SWIFT_PROTOCOL("_TtP9VSSHEmvQr29PaymentSystemSpecificTemplate_")
@protocol PaymentSystemSpecificTemplate
/// An identifier that sets the context of the data that follows.
@property (nonatomic, readonly, copy) NSString * _Nullable globallyUniqueIdentifier;
/// Association of data objects to IDs and type of data object is specific to the Globally Unique Identifier.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable paymentSystemSpecific;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
